import { KurentoRoom } from './KurentoRoom';
import { Stream } from './Stream';
import { RoomOptions, ParticipantOptions, MessageOptions } from './options.model';
export declare class Room {
    private kurento;
    private options;
    private name;
    private streams;
    private participants;
    private participantsSpeaking;
    private connected;
    private localParticipant;
    private subscribeToStreams;
    private updateSpeakerInterval;
    private thresholdSpeaker;
    private ee;
    constructor(kurento: KurentoRoom, options: RoomOptions);
    getParticipants(): any;
    updateMainSpeaker(): void;
    getName(): string;
    getLocalParticipant(): any;
    getThresholdSpeaker(): () => any;
    addEventListener(eventName: string, listener: Function): void;
    emitEvent(eventName: string, eventsArray: any[]): void;
    connect(): void;
    subscribe(stream: Stream): void;
    onParticipantPublished(options: ParticipantOptions): void;
    onParticipantJoined(msg: ParticipantOptions): void;
    onParticipantLeft(msg: any): void;
    onParticipantEvicted(msg: any): void;
    onNewMessage(msg: MessageOptions): void;
    recvIceCandidate(msg: any): boolean;
    onRoomClosed(msg: any): void;
    onLostConnection(): boolean;
    onMediaError(params: any): void;
    leave(forced: boolean, jsonRpcClient: any): void;
    disconnect(stream: Stream): boolean;
    getStreams(): Stream[];
    addStream(stream: Stream): void;
    addParticipantSpeaking(participantId: string): void;
    removeParticipantSpeaking(participantId: string): void;
}
