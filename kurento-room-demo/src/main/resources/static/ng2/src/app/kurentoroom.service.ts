import { Injectable } from '@angular/core';
import { ROUTER_DIRECTIVES, Router } from "@angular/router";
import { KurentoRoom } from './KurentoRoom';
import { Room } from './Room';
import { Stream } from './Stream';
import { Participant } from './Participant';
import { ServiceParticipant} from './participant.service'
import { ServiceRoom } from './room.service'

declare var checkColor: any;
declare var getUserMedia: any;

@Injectable()
export class KurentoroomService {

	private kurento: KurentoRoom = new KurentoRoom("ws://localhost:8080/room");
	private room: Room;
	private roomName: string;
	private userName: string;
	private clientConfig: any;
	private updateSpeakerInterval: any;
	private thresholdSpeaker: any;

	constructor(private serviceParticipant: ServiceParticipant, private serviceRoom: ServiceRoom, private router: Router) { }

	connect(){
		let displayPublished = this.clientConfig.loopbackRemote || false;
        //also show local stream when display my remote
        let mirrorLocal = this.clientConfig.loopbackAndLocal || false;
        this.kurento.connect((error, kurento) => {

        	if (error)
        		alert(error);

            //TODO token should be generated by the server or a 3rd-party component  
            //kurento.setRpcParams({token : "securityToken"});
            this.room = kurento.createRoom({
            	room: this.roomName,
            	user: this.userName,
            	updateSpeakerInterval: this.updateSpeakerInterval,
            	thresholdSpeaker: this.thresholdSpeaker,
            	subscribeToStreams: null
            });

            let localStream = kurento.createStream(this.room, {
            	video: true,
            	audio: true,
            	id: null,
            	participant:null,
            	recvAudio: null,
            	recvVideo: null,
            	data: true
            });

            localStream.addEventListener("access-accepted",  ()=> {
            	this.room.addEventListener("room-connected", (roomEvent:any) => {
            		let streams = roomEvent.streams;
            		if (displayPublished ) {
            			localStream.subscribeToMyRemote();
            		}
            		localStream.publish();
            		this.serviceRoom.setLocalStream(localStream.getWebRtcPeer());
            		for (let stream of streams) {
            			this.serviceParticipant.addParticipant(stream);
            		}
            	});

            	this.room.addEventListener("stream-published", (streamEvent:any)=> {
            		this.serviceParticipant.addLocalParticipant(localStream);
            		if (mirrorLocal && localStream.displayMyRemote()) {
            			var localVideo = kurento.createStream(this.room, {
            				video: true,
            				audio: true,
            				id: "localStream",
            				participant:null,
            				recvAudio: null,
            				recvVideo: null,
            				data: null
            			});
            			localVideo.mirrorLocalStream(localStream.getWrStream());
            			this.serviceParticipant.addLocalMirror(localVideo);
            		}
            	});

            	this.room.addEventListener("stream-added", (streamEvent:any) => {
            		this.serviceParticipant.addParticipant(streamEvent.stream);
            	});

            	this.room.addEventListener("stream-removed", (streamEvent:any) => {
            		this.serviceParticipant.removeParticipantByStream(streamEvent.stream);
            	});

            	this.room.addEventListener("newMessage", (msg:any) => {
            		this.serviceParticipant.showMessage(msg.room, msg.user, msg.message);
            	});

            	this.room.addEventListener("error-room", (error:any) => {
            		/*this.serviceParticipant.showError($window, LxNotificationService, error);*/
            	});

            	this.room.addEventListener("error-media", (msg:any) => {
                    /*this.serviceParticipant.alertMediaError($window, LxNotificationService, msg.error, (answer:any) => {
                    	console.warn("Leave room because of error: " + answer);
                    	if (answer) {
                    		kurento.close(true);
                    	}
                    });*/
                });

            	this.room.addEventListener("room-closed", (msg:any) => {
            		if (msg.room !== this.roomName) {
            			console.error("Closed room name doesn't match this room's name", 
            				msg.room, this.roomName);
            		} else {
            			kurento.close(true);
                		/*this.serviceParticipant.forceClose($window, LxNotificationService, 'Room '
                		+ msg.room + ' has been forcibly closed from server');*/
                	}
                });

            	this.room.addEventListener("lost-connection", (msg:any) => {
            		kurento.close(true);
                    /*ServiceParticipant.forceClose($window, LxNotificationService,
                      'Lost connection with room "' + msg.room +
                      '". Please try reloading the webpage...');*/
                  });

            	this.room.addEventListener("stream-stopped-speaking",  (participantId: any) => {
            		this.serviceParticipant.streamStoppedSpeaking(participantId);
            	});

            	this.room.addEventListener("stream-speaking", (participantId: any) => {
            		this.serviceParticipant.streamSpeaking(participantId);
            	});

            	this.room.addEventListener("update-main-speaker", (participantId:any) => {
            		this.serviceParticipant.updateMainSpeaker(participantId);
            	});

            	this.room.connect();
            });

            localStream.addEventListener("access-denied", () => {
            	/*this.serviceParticipant.showError($window, LxNotificationService, {
            		error : {
            			message : "Access not granted to camera and microphone"
            				}
            			});*/
            		});
            localStream.init();
        });
		//save kurento & roomName & userName in service
		this.serviceRoom.setKurento(this.kurento);
		this.serviceRoom.setRoomName(this.roomName);
		this.serviceRoom.setUserName(this.userName);
		this.router.navigate(['/call']);
	}

	getRoom() {
		return this.room;
	}

	getRoomName(){
		return this.roomName;
	}

	getUserName(){
		return this.userName;
	}

	configureService(userName:string, roomName: string, updateSpeakerInterval: any, thresholdSpeaker: any, clientConfig: any){
		this.userName=userName;
		this.roomName=roomName;
		this.updateSpeakerInterval=updateSpeakerInterval;
		this.thresholdSpeaker=thresholdSpeaker;
		this.clientConfig=clientConfig;
	}

	leaveRoom() {
		this.kurento.close();
	}

}
